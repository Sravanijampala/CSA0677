#include <stdio.h>

void setZeroes(int matrix[3][3], int matrixSize, int* matrixColSize) {
    int m = matrixSize;
    int n = *matrixColSize;
    
    // Variables to track if first row and first column need to be zeroed
    int firstRowZero = 0;
    int firstColZero = 0;
    
    // Step 1: Check if first row contains zero
    for (int j = 0; j < n; ++j) {
        if (matrix[0][j] == 0) {
            firstRowZero = 1;
            break;
        }
    }
    
    // Step 2: Check if first column contains zero
    for (int i = 0; i < m; ++i) {
        if (matrix[i][0] == 0) {
            firstColZero = 1;
            break;
        }
    }
    
    // Step 3: Mark zeros on first row and first column
    for (int i = 1; i < m; ++i) {
        for (int j = 1; j < n; ++j) {
            if (matrix[i][j] == 0) {
                matrix[i][0] = 0;
                matrix[0][j] = 0;
            }
        }
    }
    
    // Step 4: Use marks to set elements to zero
    for (int i = 1; i < m; ++i) {
        for (int j = 1; j < n; ++j) {
            if (matrix[i][0] == 0 || matrix[0][j] == 0) {
                matrix[i][j] = 0;
            }
        }
    }
    
    // Step 5: Handle first row and first column
    if (firstRowZero) {
        for (int j = 0; j < n; ++j) {
            matrix[0][j] = 0;
        }
    }
    
    if (firstColZero) {
        for (int i = 0; i < m; ++i) {
            matrix[i][0] = 0;
        }
    }
}

int main() {
    int matrix[3][3] = {
        {1, 1, 1},
        {1, 0, 1},
        {1, 1, 1}
    };
    int matrixSize = 3;
    int matrixColSize = 3;
    
    // Output the original matrix
    printf("Original Matrix:\n");
    for (int i = 0; i < matrixSize; ++i) {
        for (int j = 0; j < matrixColSize; ++j) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
    
    // Call the function to modify the matrix
    setZeroes(matrix, matrixSize, &matrixColSize);
    
    // Output the modified matrix
    printf("\nModified Matrix:\n");
    for (int i = 0; i < matrixSize; ++i) {
        for (int j = 0; j < matrixColSize; ++j) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
    
    return 0;
}
