#include <stdio.h>
#include <stdlib.h>

#define MAXN 20

int arr[MAXN];
int subset1[MAXN], subset2[MAXN];
int n;
int targetSum;

// Function to generate all subsets of the array and calculate their sums
void generateSubsets(int index, int end, int subset[], int *subsetSize, long long subsetSum[], int maxSubsetSize) {
    if (index == end) {
        // Process the subset (e.g., store its sum)
        long long sum = 0;
        for (int i = 0; i < *subsetSize; ++i) {
            sum += subset[i];
        }
        subsetSum[*subsetSize] = sum;
        (*subsetSize)++;
        return;
    }
    
    // Include current element in the subset
    subset[(*subsetSize)++] = arr[index];
    generateSubsets(index + 1, end, subset, subsetSize, subsetSum, maxSubsetSize);
    
    // Exclude current element from the subset
    (*subsetSize)--;
    generateSubsets(index + 1, end, subset, subsetSize, subsetSum, maxSubsetSize);
}

// Function to find if there exists two subsets such that their sums are equal to targetSum
int meetInTheMiddle() {
    int halfSize = n / 2;
    int otherHalfSize = n - halfSize;
    
    long long subsetSum1[1 << halfSize]; // All possible sums of subsets of the first half
    long long subsetSum2[1 << otherHalfSize]; // All possible sums of subsets of the second half
    int size1 = 0, size2 = 0;
    
    // Generate all subsets of the first half and calculate their sums
    generateSubsets(0, halfSize, subset1, &size1, subsetSum1, halfSize);
    
    // Generate all subsets of the second half and calculate their sums
    generateSubsets(halfSize, n, subset2, &size2, subsetSum2, otherHalfSize);
    
    // Sort subsetSum2 to use binary search
    qsort(subsetSum2, size2, sizeof(long long), cmpfunc);
    
    // Check if there exists two subsets such that their sums are equal to targetSum
    for (int i = 0; i < size1; ++i) {
        long long needed = targetSum - subsetSum1[i];
        
        // Use binary search to find needed in subsetSum2
        if (binarySearch(subsetSum2, size2, needed)) {
            return 1; // Found a match
        }
    }
    
    return 0; // No such subsets exist
}

// Comparator function for qsort
int cmpfunc(const void *a, const void *b) {
    return (*(long long *)a - *(long long *)b);
}

// Binary search function
int binarySearch(long long arr[], int size, long long key) {
    int left = 0, right = size - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == key) {
            return 1; // Found
        } else if (arr[mid] < key) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return 0; // Not found
}

// Driver program
int main() {
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    printf("Enter the elements: ");
    for (int i = 0; i < n; ++i) {
        scanf("%d", &arr[i]);
    }
    printf("Enter the target sum: ");
    scanf("%d", &targetSum);
    
    if (meetInTheMiddle()) {
        printf("There exist two subsets with equal sums.\n");
    } else {
        printf("No such subsets exist.\n");
    }
    
    return 0;
}
