#include <stdio.h>
#include <stdbool.h>

#define N 9 // Size of Sudoku grid

// Function prototypes
void print_grid(int grid[N][N]);
bool find_empty_location(int grid[N][N], int *row, int *col);
bool is_safe(int grid[N][N], int row, int col, int num);
bool solve_sudoku(int grid[N][N]);

// Main function
int main() {
    int grid[N][N] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    printf("Sudoku grid before solving:\n");
    print_grid(grid);

    if (solve_sudoku(grid)) {
        printf("\nSudoku grid after solving:\n");
        print_grid(grid);
    } else {
        printf("\nNo solution exists.\n");
    }

    return 0;
}

// Function to print the Sudoku grid
void print_grid(int grid[N][N]) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            printf("%2d ", grid[row][col]);
        }
        printf("\n");
    }
}

// Function to find an empty location in the grid
bool find_empty_location(int grid[N][N], int *row, int *col) {
    for (*row = 0; *row < N; (*row)++) {
        for (*col = 0; *col < N; (*col)++) {
            if (grid[*row][*col] == 0) {
                return true; // Found empty location
            }
        }
    }
    return false; // No empty location found
}

// Function to check if it's safe to place a number in a specific position
bool is_safe(int grid[N][N], int row, int col, int num) {
    // Check row and column constraints
    for (int i = 0; i < N; i++) {
        if (grid[row][i] == num || grid[i][col] == num) {
            return false;
        }
    }

    // Check 3x3 sub-grid constraints
    int start_row = row - row % 3;
    int start_col = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[start_row + i][start_col + j] == num) {
                return false;
            }
        }
    }

    return true; // Placement is safe
}

// Recursive function to solve Sudoku using backtracking
bool solve_sudoku(int grid[N][N]) {
    int row, col;

    // If there is no empty location, Sudoku is solved
    if (!find_empty_location(grid, &row, &col)) {
        return true; // All cells are filled
    }

    // Try placing digits 1-9 in the empty location
    for (int num = 1; num <= 9; num++) {
        // Check if it's safe to place num in the current location
        if (is_safe(grid, row, col, num)) {
            grid[row][col] = num; // Place num in the current location

            // Recursively solve Sudoku
            if (solve_sudoku(grid)) {
                return true; // If successful, return true
            }

            // If placing num doesn't lead to a solution, backtrack
            grid[row][col] = 0; // Reset the cell
        }
    }

    return false; // Backtracking trigger
}
