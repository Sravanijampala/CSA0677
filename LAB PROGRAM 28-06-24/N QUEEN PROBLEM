#include <stdio.h>
#include <stdbool.h>

#define N 8  // Change N to the desired board size

int board[N][N];

// Function prototypes
void initialize_board();
void print_board();
bool is_safe(int row, int col);
bool solve_n_queens(int col);

// Main function
int main() {
    initialize_board();
    if (solve_n_queens(0)) {
        printf("Solution found:\n");
        print_board();
    } else {
        printf("No solution exists for N = %d.\n", N);
    }
    return 0;
}

// Initialize the board to 0 (no queen)
void initialize_board() {
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            board[i][j] = 0;
        }
    }
}

// Print the board configuration
void print_board() {
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}

// Check if it's safe to place a queen at board[row][col]
bool is_safe(int row, int col) {
    // Check this row on the left side
    for (int i = 0; i < col; ++i) {
        if (board[row][i] == 1) {
            return false;
        }
    }

    // Check upper diagonal on left side
    for (int i = row, j = col; i >= 0 && j >= 0; --i, --j) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    // Check lower diagonal on left side
    for (int i = row, j = col; i < N && j >= 0; ++i, --j) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    // If no conflicts found, it's safe
    return true;
}

// Recursive function to solve N-Queens problem
bool solve_n_queens(int col) {
    // Base case: if all queens are placed return true
    if (col >= N) {
        return true;
    }

    // Consider this column and try placing this queen in all rows one by one
    for (int i = 0; i < N; ++i) {
        if (is_safe(i, col)) {
            // Place queen at board[i][col]
            board[i][col] = 1;

            // Recur to place rest of the queens
            if (solve_n_queens(col + 1)) {
                return true;
            }

            // If placing queen in board[i][col] doesn't lead to a solution, backtrack
            board[i][col] = 0; // Backtrack
        }
    }

    // If queen can't be placed in any row in this column, return false
    return false;
}
