#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100 // Adjust this based on your maximum number of vertices

// Structure to represent a graph
struct Graph {
    int num_vertices;
    int adjacency_matrix[MAX_VERTICES][MAX_VERTICES];
};

// Function prototypes
void initialize_graph(struct Graph *G, int num_vertices);
void add_edge(struct Graph *G, int v1, int v2);
void print_graph(struct Graph *G);
void greedy_coloring(struct Graph *G, int colors[]);

// Main function
int main() {
    struct Graph G;
    int num_vertices, num_edges;
    int v1, v2;

    // Input number of vertices and edges
    printf("Enter number of vertices: ");
    scanf("%d", &num_vertices);

    printf("Enter number of edges: ");
    scanf("%d", &num_edges);

    // Initialize the graph
    initialize_graph(&G, num_vertices);

    // Input edges
    printf("Enter edges (vertex1 vertex2):\n");
    for (int i = 0; i < num_edges; ++i) {
        scanf("%d %d", &v1, &v2);
        add_edge(&G, v1, v2);
    }

    // Print the adjacency matrix (optional)
    printf("Adjacency Matrix:\n");
    print_graph(&G);

    // Array to store colors assigned to vertices
    int colors[MAX_VERTICES];

    // Perform greedy graph coloring
    greedy_coloring(&G, colors);

    // Print the colors assigned to each vertex
    printf("Colors assigned to vertices:\n");
    for (int i = 0; i < G.num_vertices; ++i) {
        printf("Vertex %d: Color %d\n", i, colors[i]);
    }

    return 0;
}

// Function to initialize the graph with given number of vertices
void initialize_graph(struct Graph *G, int num_vertices) {
    G->num_vertices = num_vertices;

    // Initialize adjacency matrix with 0s
    for (int i = 0; i < num_vertices; ++i) {
        for (int j = 0; j < num_vertices; ++j) {
            G->adjacency_matrix[i][j] = 0;
        }
    }
}

// Function to add an edge between vertices v1 and v2
void add_edge(struct Graph *G, int v1, int v2) {
    G->adjacency_matrix[v1][v2] = 1;
    G->adjacency_matrix[v2][v1] = 1; // Since the graph is undirected
}

// Function to print the adjacency matrix of the graph
void print_graph(struct Graph *G) {
    for (int i = 0; i < G->num_vertices; ++i) {
        for (int j = 0; j < G->num_vertices; ++j) {
            printf("%d ", G->adjacency_matrix[i][j]);
        }
        printf("\n");
    }
}

// Function to perform greedy coloring of the graph
void greedy_coloring(struct Graph *G, int colors[]) {
    // Initialize all vertices as uncolored (-1)
    for (int i = 0; i < G->num_vertices; ++i) {
        colors[i] = -1;
    }

    // Assign the first color to the first vertex
    colors[0] = 0;

    // Array to keep track of available colors
    bool available[G->num_vertices];
    for (int i = 0; i < G->num_vertices; ++i) {
        available[i] = true;
    }

    // Assign colors to remaining vertices
    for (int v = 1; v < G->num_vertices; ++v) {
        // Mark colors of adjacent vertices as unavailable
        for (int i = 0; i < G->num_vertices; ++i) {
            if (G->adjacency_matrix[v][i] && colors[i] != -1) {
                available[colors[i]] = false;
            }
        }

        // Find the first available color
        int c;
        for (c = 0; c < G->num_vertices; ++c) {
            if (available[c]) {
                break;
            }
        }

        colors[v] = c; // Assign the found color

        // Reset the values back to true for next iteration
        for (int i = 0; i < G->num_vertices; ++i) {
            if (G->adjacency_matrix[v][i] && colors[i] != -1) {
                available[colors[i]] = true;
            }
        }
    }
}
