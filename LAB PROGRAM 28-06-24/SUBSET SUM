#include <stdio.h>
#include <stdbool.h>

#define MAX_ELEMENTS 100 // Adjust this based on your maximum number of elements in the set

// Function prototypes
bool subset_sum(int set[], int n, int sum);
void print_subset(int set[], bool dp[], int n, int sum);

// Main function
int main() {
    int n; // Number of elements in the set
    int set[MAX_ELEMENTS]; // Array to store the set of elements
    int sum; // Target sum

    // Input the number of elements
    printf("Enter number of elements in the set: ");
    scanf("%d", &n);

    // Input the elements of the set
    printf("Enter the elements of the set:\n");
    for (int i = 0; i < n; ++i) {
        scanf("%d", &set[i]);
    }

    // Input the target sum
    printf("Enter the target sum: ");
    scanf("%d", &sum);

    // Solve the subset sum problem
    if (subset_sum(set, n, sum)) {
        printf("Subset with the given sum found:\n");
        // Print the subset that sums up to the target
        print_subset(set, subset_sum, n, sum);
    } else {
        printf("No subset with the given sum exists.\n");
    }

    return 0;
}

// Function to solve the subset sum problem using dynamic programming
bool subset_sum(int set[], int n, int sum) {
    // dp[i][j] will be true if there is a subset of set[0..i-1] with sum equal to j
    bool dp[n + 1][sum + 1];

    // If sum is 0, then answer is true
    for (int i = 0; i <= n; i++)
        dp[i][0] = true;

    // If sum is not 0 and set is empty, then answer is false
    for (int i = 1; i <= sum; i++)
        dp[0][i] = false;

    // Fill dp[][] in bottom up manner
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= sum; j++) {
            dp[i][j] = dp[i - 1][j];
            if (j >= set[i - 1])
                dp[i][j] = dp[i][j] || dp[i - 1][j - set[i - 1]];
        }
    }

    // Uncomment this code to print dp table
    /*for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= sum; j++)
            printf ("%4d", dp[i][j]);
        printf("\n");
    }*/
    return dp[n][sum];
}

// Function to print the subset that sums up to the target sum
void print_subset(int set[], bool dp[], int n, int sum) {
    if (sum == 0)
        return;

    for (int i = n; i > 0; i--) {
        if (dp[i - 1] && sum >= set[i - 1] && !dp[i - 1][sum - set[i - 1]]) {
            printf("%d ", set[i - 1]);
            sum -= set[i - 1];
        }
    }
    printf("\n");
}
