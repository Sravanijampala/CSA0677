#include <stdio.h>

// Function to search for a target in a rotated sorted array
int search(int* nums, int numsSize, int target) {
    // Initialize two pointers, one for the start and one for the end
    int left = 0, right = numsSize - 1;

    // Perform binary search
    while (left <= right) {
        int mid = left + (right - left) / 2;

        // If the target is found, return its index
        if (nums[mid] == target) {
            return mid;
        }

        // If the left half is sorted
        if (nums[left] <= nums[mid]) {
            // If the target is in the left half, move the right pointer
            if (nums[left] <= target && target < nums[mid]) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        // If the right half is sorted
        else {
            // If the target is in the right half, move the left pointer
            if (nums[mid] < target && target <= nums[right]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
    }

    // If the target is not found, return -1
    return -1;
}

int main() {
    int nums[] = {4, 5, 6, 7, 0, 1, 2};
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    int target = 0;
    int result = search(nums, numsSize, target);

    if (result != -1) {
        printf("Target found at index %d\n", result);
    } else {
        printf("Target not found\n");
    }

    return 0;
}
