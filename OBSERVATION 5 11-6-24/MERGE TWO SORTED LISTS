#include <stdio.h>
#include <stdlib.h>

// Define the structure for a linked list node
typedef struct Node {
    int val;
    struct Node* next;
} Node;

// Function to create a new linked list node
Node* newNode(int val) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->val = val;
    node->next = NULL;
    return node;
}

// Function to merge two sorted linked lists
Node* mergeTwoLists(Node* list1, Node* list2) {
    // Create a new head for the merged list
    Node* head = NULL;
    Node** current = &head;

    // Merge nodes from both lists until one of them becomes empty
    while (list1 && list2) {
        if (list1->val <= list2->val) {
            *current = list1;
            list1 = list1->next;
        } else {
            *current = list2;
            list2 = list2->next;
        }
        current = &((*current)->next);
    }

    // If list1 is not empty, append its nodes to the merged list
    if (list1) {
        *current = list1;
    }
    // If list2 is not empty, append its nodes to the merged list
    else {
        *current = list2;
    }

    return head;
}

// Function to print the linked list
void printList(Node* head) {
    while (head) {
        printf("%d ", head->val);
        head = head->next;
    }
    printf("\n");
}

int main() {
    // Create the linked lists
    Node* list1 = newNode(1);
    list1->next = newNode(2);
    list1->next->next = newNode(4);

    Node* list2 = newNode(1);
    list2->next = newNode(3);
    list2->next->next = newNode(4);

    // Merge the linked lists
    Node* mergedList = mergeTwoLists(list1, list2);

    // Print the merged linked list
    printList(mergedList);

    return 0;
}

