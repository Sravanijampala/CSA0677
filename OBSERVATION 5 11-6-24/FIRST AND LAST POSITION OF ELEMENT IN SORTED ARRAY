#include <stdio.h>

// Function to find the first position of an element in a sorted array
int findFirst(int* nums, int numsSize, int target) {
    int left = 0, right = numsSize - 1;

    // Perform binary search
    while (left <= right) {
        int mid = left + (right - left) / 2;

        // If the target is found, move the right pointer to find the first position
        if (nums[mid] == target) {
            if (mid == 0 || nums[mid - 1] != target) {
                return mid;
            }
            right = mid - 1;
        }
        // If the target is less than the middle element, move the right pointer
        else if (nums[mid] > target) {
            right = mid - 1;
        }
        // If the target is greater than the middle element, move the left pointer
        else {
            left = mid + 1;
        }
    }

    // If the target is not found, return -1
    return -1;
}

// Function to find the last position of an element in a sorted array
int findLast(int* nums, int numsSize, int target) {
    int left = 0, right = numsSize - 1;

    // Perform binary search
    while (left <= right) {
        int mid = left + (right - left) / 2;

        // If the target is found, move the left pointer to find the last position
        if (nums[mid] == target) {
            if (mid == numsSize - 1 || nums[mid + 1] != target) {
                return mid;
            }
            left = mid + 1;
        }
        // If the target is less than the middle element, move the right pointer
        else if (nums[mid] > target) {
            right = mid - 1;
        }
        // If the target is greater than the middle element, move the left pointer
        else {
            left = mid + 1;
        }
    }

    // If the target is not found, return -1
    return -1;
}

// Function to find the first and last position of an element in a sorted array
int* findFirstAndLast(int* nums, int numsSize, int target, int* returnSize) {
    int first = findFirst(nums, numsSize, target);
    if (first == -1) {
        *returnSize = 2;
        return (int*)malloc(sizeof(int) * 2);
    }

    int last = findLast(nums, numsSize, target);

    *returnSize = 2;
    int* result = (int*)malloc(sizeof(int) * 2);
    result[0] = first;
    result[1] = last;

    return result;
}

int main() {
    int nums[] = {5, 7, 7, 8, 8, 10};
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    int target = 8;
    int returnSize;
    int* result = findFirstAndLast(nums, numsSize, target, &returnSize);

    if (returnSize == 2) {
        printf("First and last position of %d: [%d, %d]\n", target, result[0], result[1]);
    } else {
        printf("Target not found\n");
    }

    free(result);

    return 0;
}
