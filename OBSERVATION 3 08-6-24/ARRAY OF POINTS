#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Define a point structure
typedef struct {
    int x;
    int y;
    double distance;
} Point;

// Function to calculate the Euclidean distance from the origin
double calculateDistance(int x, int y) {
    return sqrt(x * x + y * y);
}

// Comparator function for qsort to sort points by their distance
int comparePoints(const void *a, const void *b) {
    Point *pointA = (Point *)a;
    Point *pointB = (Point *)b;
    return (pointA->distance > pointB->distance) - (pointA->distance < pointB->distance);
}

// Function to find the k closest points to the origin
void kClosestPoints(int points[][2], int pointsSize, int k, int result[][2]) {
    Point *pointArray = (Point *)malloc(pointsSize * sizeof(Point));
    for (int i = 0; i < pointsSize; i++) {
        pointArray[i].x = points[i][0];
        pointArray[i].y = points[i][1];
        pointArray[i].distance = calculateDistance(points[i][0], points[i][1]);
    }

    // Sort points by distance using qsort
    qsort(pointArray, pointsSize, sizeof(Point), comparePoints);

    // Copy the k closest points to the result array
    for (int i = 0; i < k; i++) {
        result[i][0] = pointArray[i].x;
        result[i][1] = pointArray[i].y;
    }

    free(pointArray);
}

int main() {
    // Example input
    int points[][2] = {{1, 3}, {-2, 2}, {5, 8}, {0, 1}};
    int pointsSize = sizeof(points) / sizeof(points[0]);
    int k = 2;
    int result[k][2];

    // Find the k closest points
    kClosestPoints(points, pointsSize, k, result);

    // Print the result
    printf("The %d closest points to the origin are:\n", k);
    for (int i = 0; i < k; i++) {
        printf("[%d, %d]\n", result[i][0], result[i][1]);
    }

    return 0;
}
