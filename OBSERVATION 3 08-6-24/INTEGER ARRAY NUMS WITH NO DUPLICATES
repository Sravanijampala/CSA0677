#include <stdio.h>
#include <limits.h>

// Function to find the maximum subarray sum using Kadane's algorithm
int kadane(int* nums, int n) {
    int max_sum = INT_MIN;
    int current_sum = 0;

    for (int i = 0; i < n; i++) {
        current_sum = current_sum + nums[i];
        if (current_sum > max_sum) {
            max_sum = current_sum;
        }
        if (current_sum < 0) {
            current_sum = 0;
        }
    }

    return max_sum;
}

// Function to find the maximum circular subarray sum
int maxSubarraySumCircular(int* nums, int numsSize) {
    int non_circular_max = kadane(nums, numsSize);
    
    // Compute the total sum of the array
    int total_sum = 0;
    for (int i = 0; i < numsSize; i++) {
        total_sum += nums[i];
    }

    // Invert the sign of the array elements to find the minimum subarray sum using Kadane's algorithm
    for (int i = 0; i < numsSize; i++) {
        nums[i] = -nums[i];
    }

    int inverted_kadane = kadane(nums, numsSize);

    // Restore the original array elements
    for (int i = 0; i < numsSize; i++) {
        nums[i] = -nums[i];
    }

    int circular_max = total_sum + inverted_kadane;

    if (circular_max == 0) { // This means all elements are negative, so the maximum circular sum is invalid
        return non_circular_max;
    }

    return (non_circular_max > circular_max) ? non_circular_max : circular_max;
}

int main() {
    int nums[] = {5, -3, 5};
    int numsSize = sizeof(nums) / sizeof(nums[0]);

    int result = maxSubarraySumCircular(nums, numsSize);
    printf("The maximum possible sum of a non-empty subarray of the circular array is: %d\n", result);

    return 0;
}
