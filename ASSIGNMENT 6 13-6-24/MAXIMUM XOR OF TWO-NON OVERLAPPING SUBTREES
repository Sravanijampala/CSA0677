#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Structure to represent a node in the tree
struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Helper function to create a new tree node
struct TreeNode* createNode(int val) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->val = val;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Helper function to perform DFS to calculate sum of values for each subtree
int dfs(struct TreeNode* root, int values[], int subtreeSums[]) {
    if (root == NULL) {
        return 0;
    }
    
    int leftSum = dfs(root->left, values, subtreeSums);
    int rightSum = dfs(root->right, values, subtreeSums);
    int totalSum = leftSum + rightSum + root->val;
    subtreeSums[root->val] = totalSum;
    
    return totalSum;
}

// Helper function to calculate maximum XOR score
int maxScoreHelper(int values[], int subtreeSums[], int n) {
    int maxScore = 0;
    
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if ((subtreeSums[i] & subtreeSums[j]) == 0) {
                maxScore = (maxScore > (subtreeSums[i] ^ subtreeSums[j])) ? maxScore : (subtreeSums[i] ^ subtreeSums[j]);
            }
        }
    }
    
    return maxScore;
}

// Function to find maximum XOR of two non-overlapping subtrees
int maxScore(int n, int** edges, int edgesSize, int* edgesColSize, int* values) {
    // Create adjacency list to represent the tree
    struct TreeNode* adjList[n];
    for (int i = 0; i < n; i++) {
        adjList[i] = NULL;
    }
    
    for (int i = 0; i < edgesSize; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        
        if (adjList[u] == NULL) {
            adjList[u] = createNode(u);
        }
        if (adjList[v] == NULL) {
            adjList[v] = createNode(v);
        }
        
        if (adjList[u]->left == NULL) {
            adjList[u]->left = adjList[v];
        } else {
            adjList[u]->right = adjList[v];
        }
    }
    
    // Perform DFS to calculate sum of values for each subtree
    int subtreeSums[n];
    dfs(adjList[0], values, subtreeSums);
    
    // Calculate maximum XOR score
    return maxScoreHelper(values, subtreeSums, n);
}

int main() {
    int n = 6;
    int edges[][2] = {{0,1},{0,2},{1,3},{1,4},{2,5}};
    int values[] = {2,8,3,6,2,5};
    int edgesSize = sizeof(edges) / sizeof(edges[0]);
    int edgesColSize = sizeof(edges[0]) / sizeof(edges[0][0]);
    
    int result = maxScore(n, (int**)edges, edgesSize, &edgesColSize, values);
    printf("Output: %d\n", result);
    
    return 0;
}
