#include <stdio.h>
#include <string.h>

char * longestPalindrome(char * s) {
    int n = strlen(s);
    if (n == 0) return "";
    
    // Initialize a table to store whether substring s[i:j] is a palindrome
    int dp[n][n];
    memset(dp, 0, sizeof(dp));
    
    // Initialize variables to store the start and length of the longest palindromic substring found so far
    int start = 0, maxLength = 1;
    
    // Base case: single characters are palindromes
    for (int i = 0; i < n; i++) {
        dp[i][i] = 1;
    }
    
    // Check for palindromes of length 2
    for (int i = 0; i < n - 1; i++) {
        if (s[i] == s[i + 1]) {
            dp[i][i + 1] = 1;
            start = i;
            maxLength = 2;
        }
    }
    
    // Check for palindromes of length greater than 2
    for (int len = 3; len <= n; len++) {
        for (int i = 0; i < n - len + 1; i++) {
            int j = i + len - 1;
            if (s[i] == s[j] && dp[i + 1][j - 1]) {
                dp[i][j] = 1;
                start = i;
                maxLength = len;
            }
        }
    }
    
    // Allocate memory for the result substring
    char *result = (char *)malloc((maxLength + 1) * sizeof(char));
    strncpy(result, s + start, maxLength);
    result[maxLength] = '\0';
    
    return result;
}

int main() {
    char s[] = "babad";
    char *result = longestPalindrome(s);
    printf("Output: %s\n", result);
    free(result); // Free allocated memory
    return 0;
}
