#include <stdio.h>
#include <stdlib.h>

int cmpfunc (const void * a, const void * b) {
   return ( *(int*)a - *(int*)b );
}

int threeSumClosest(int* nums, int numsSize, int target, int* returnSize) {
    if (numsSize < 3) return 0;
    
    qsort(nums, numsSize, sizeof(int), cmpfunc);
    
    int closest = nums[0] + nums[1] + nums[2];
    int i = 0, j = 1, k = numsSize - 1;
    
    while (i < j && j < k) {
        int sum = nums[i] + nums[j] + nums[k];
        if (sum == target) return sum;
        
        if (abs(sum - target) < abs(closest - target)) {
            closest = sum;
        }
        
        if (sum < target) {
            i++;
        } else if (sum > target) {
            k--;
        } else {
            j++;
            i++;
            k--;
        }
    }
    
    return closest;
}

int main() {
    int nums[] = {-1,2,1,-4};
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    int target = 1;
    int returnSize;
    int result = threeSumClosest(nums, numsSize, target, &returnSize);
    printf("Closest sum: %d\n", result);
    
    return 0;
}
