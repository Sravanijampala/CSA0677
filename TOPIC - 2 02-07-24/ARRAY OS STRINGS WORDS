#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to check if `word1` is a substring of `word2`
int isSubstring(char *word1, char *word2) {
    return strstr(word2, word1) != NULL;
}

char **stringMatching(char **words, int wordsSize, int *returnSize) {
    char **result = (char **)malloc(wordsSize * sizeof(char *));
    int count = 0;
    
    // Check each pair of words
    for (int i = 0; i < wordsSize; ++i) {
        for (int j = 0; j < wordsSize; ++j) {
            if (i != j && isSubstring(words[i], words[j])) {
                result[count++] = words[i];
                break; // Found as a substring, no need to check further
            }
        }
    }
    
    *returnSize = count;
    return result;
}

void printResult(char **result, int size) {
    printf("[");
    for (int i = 0; i < size; ++i) {
        printf("%s", result[i]);
        if (i < size - 1) {
            printf(", ");
        }
    }
    printf("]\n");
}

int main() {
    char *words1[] = {"mass", "as", "hero", "superhero"};
    int size1 = sizeof(words1) / sizeof(words1[0]);
    
    char *words2[] = {"leetcode", "et", "code"};
    int size2 = sizeof(words2) / sizeof(words2[0]);
    
    char *words3[] = {"blue", "green", "bu"};
    int size3 = sizeof(words3) / sizeof(words3[0]);
    
    int returnSize;
    
    printf("Example 1:\n");
    printf("Input: words = [\"mass\",\"as\",\"hero\",\"superhero\"]\n");
    char **result1 = stringMatching(words1, size1, &returnSize);
    printf("Output: ");
    printResult(result1, returnSize);
    free(result1);
    printf("\n");
    
    printf("Example 2:\n");
    printf("Input: words = [\"leetcode\",\"et\",\"code\"]\n");
    char **result2 = stringMatching(words2, size2, &returnSize);
    printf("Output: ");
    printResult(result2, returnSize);
    free(result2);
    printf("\n");
    
    printf("Example 3:\n");
    printf("Input: words = [\"blue\",\"green\",\"bu\"]\n");
    char **result3 = stringMatching(words3, size3, &returnSize);
    printf("Output: ");
    printResult(result3, returnSize);
    free(result3);
    printf("\n");
    
    return 0;
}
