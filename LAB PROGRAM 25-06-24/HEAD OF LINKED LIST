#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};

// Function to merge two sorted linked lists
struct ListNode* merge(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode dummy;
    struct ListNode* tail = &dummy;
    dummy.next = NULL;
    
    while (l1 && l2) {
        if (l1->val <= l2->val) {
            tail->next = l1;
            l1 = l1->next;
        } else {
            tail->next = l2;
            l2 = l2->next;
        }
        tail = tail->next;
    }
    
    tail->next = (l1 != NULL) ? l1 : l2;
    
    return dummy.next;
}

// Function to find the middle of the linked list using slow and fast pointers
struct ListNode* findMiddle(struct ListNode* head) {
    struct ListNode *slow = head;
    struct ListNode *fast = head;
    struct ListNode *prev = NULL;
    
    while (fast && fast->next) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }
    
    // Disconnect the first half from the second half
    if (prev) prev->next = NULL;
    
    return slow;
}

// Merge sort function for linked list
struct ListNode* mergeSort(struct ListNode* head) {
    // Base case: empty or single node
    if (!head || !head->next) return head;
    
    // Find middle of the linked list
    struct ListNode* mid = findMiddle(head);
    struct ListNode* left = head;
    struct ListNode* right = mid->next;
    mid->next = NULL; // Split the linked list into two halves
    
    // Recursively sort each half
    left = mergeSort(left);
    right = mergeSort(right);
    
    // Merge the sorted halves
    return merge(left, right);
}

// Function to print the linked list
void printList(struct ListNode* head) {
    struct ListNode* curr = head;
    while (curr) {
        printf("%d -> ", curr->val);
        curr = curr->next;
    }
    printf("NULL\n");
}

// Function to create a linked list from an array
struct ListNode* createList(int* nums, int numsSize) {
    struct ListNode dummy;
    struct ListNode* tail = &dummy;
    dummy.next = NULL;
    
    for (int i = 0; i < numsSize; ++i) {
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->val = nums[i];
        newNode->next = NULL;
        
        tail->next = newNode;
        tail = tail->next;
    }
    
    return dummy.next;
}

// Main function
int main() {
    int nums[] = {4, 2, 1, 3};
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    
    // Create the linked list
    struct ListNode* head = createList(nums, numsSize);
    
    // Sort the linked list
    head = mergeSort(head);
    
    // Print the sorted linked list
    printf("Sorted Linked List:\n");
    printList(head);
    
    // Free memory
    struct ListNode* curr = head;
    while (curr) {
        struct ListNode* temp = curr;
        curr = curr->next;
        free(temp);
    }
    
    return 0;
}
