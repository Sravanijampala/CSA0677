#include <stdio.h>
#include <stdlib.h>

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    // Ensure nums1 is the smaller array (or equal size)
    if (nums1Size > nums2Size) {
        return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);
    }
    
    int m = nums1Size;
    int n = nums2Size;
    int imin = 0, imax = m;
    int half_len = (m + n + 1) / 2;
    
    while (imin <= imax) {
        int i = (imin + imax) / 2;
        int j = half_len - i;
        
        if (i < m && nums2[j-1] > nums1[i]) {
            // i is too small, increase it
            imin = i + 1;
        } else if (i > 0 && nums1[i-1] > nums2[j]) {
            // i is too big, decrease it
            imax = i - 1;
        } else {
            // i is perfect, calculate median
            int max_of_left;
            if (i == 0) {
                max_of_left = nums2[j-1];
            } else if (j == 0) {
                max_of_left = nums1[i-1];
            } else {
                max_of_left = (nums1[i-1] > nums2[j-1]) ? nums1[i-1] : nums2[j-1];
            }
            
            if ((m + n) % 2 == 1) {
                return max_of_left;
            }
            
            int min_of_right;
            if (i == m) {
                min_of_right = nums2[j];
            } else if (j == n) {
                min_of_right = nums1[i];
            } else {
                min_of_right = (nums1[i] < nums2[j]) ? nums1[i] : nums2[j];
            }
            
            return (max_of_left + min_of_right) / 2.0;
        }
    }
    
    return 0.0; // dummy return (should never reach here)
}

// Example usage
int main() {
    int nums1[] = {1, 3};
    int nums1Size = sizeof(nums1) / sizeof(nums1[0]);
    
    int nums2[] = {2};
    int nums2Size = sizeof(nums2) / sizeof(nums2[0]);
    
    double median = findMedianSortedArrays(nums1, nums1Size, nums2, nums2Size);
    printf("Median of the two sorted arrays: %.5f\n", median);
    
    return 0;
}
