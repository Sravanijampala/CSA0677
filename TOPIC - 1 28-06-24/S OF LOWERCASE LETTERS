#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure to store intervals
struct Interval {
    int start;
    int end;
};

// Function to find large groups in the string
int** largeGroupPositions(char *s, int *returnSize, int **returnColumnSizes) {
    int len = strlen(s);
    int **result = (int**)malloc(len * sizeof(int*));
    *returnColumnSizes = (int*)malloc(len * sizeof(int));
    *returnSize = 0;

    int i = 0;
    while (i < len) {
        int start = i;
        // Find end of current group
        while (i < len && s[i] == s[start]) {
            i++;
        }
        int end = i - 1;
        
        // Check if current group is large (3 or more characters)
        if (end - start + 1 >= 3) {
            result[*returnSize] = (int*)malloc(2 * sizeof(int));
            result[*returnSize][0] = start;
            result[*returnSize][1] = end;
            (*returnColumnSizes)[*returnSize] = 2;
            (*returnSize)++;
        }
    }
    
    return result;
}

// Function to print intervals
void printIntervals(int **intervals, int size, int *columnSizes) {
    printf("[");
    for (int i = 0; i < size; i++) {
        printf("[%d, %d]", intervals[i][0], intervals[i][1]);
        if (i != size - 1) {
            printf(", ");
        }
    }
    printf("]\n");
}

int main() {
    char s[] = "abbxxxxzzy";
    int returnSize;
    int *returnColumnSizes;
    
    int **intervals = largeGroupPositions(s, &returnSize, &returnColumnSizes);
    
    printf("Output: ");
    printIntervals(intervals, returnSize, returnColumnSizes);
    
    // Free allocated memory
    for (int i = 0; i < returnSize; i++) {
        free(intervals[i]);
    }
    free(intervals);
    free(returnColumnSizes);
    
    return 0;
}
