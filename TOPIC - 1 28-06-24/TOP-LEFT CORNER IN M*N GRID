#include <stdio.h>

// Function to find the number of unique paths from (0,0) to (m-1,n-1)
int uniquePaths(int m, int n) {
    // Create a 2D array to store the number of paths to each cell
    int dp[m][n];
    
    // Initialize the number of paths for the first row and first column
    for (int i = 0; i < m; i++)
        dp[i][0] = 1; // Only one way to reach each cell in the first column (moving straight down)
    
    for (int j = 0; j < n; j++)
        dp[0][j] = 1; // Only one way to reach each cell in the first row (moving straight right)
    
    // Fill the dp array
    for (int i = 1; i < m; i++) {
        for (int j = 1; j < n; j++) {
            dp[i][j] = dp[i-1][j] + dp[i][j-1]; // Paths to cell (i,j) = paths to (i-1,j) + paths to (i,j-1)
        }
    }
    
    return dp[m-1][n-1]; // Number of unique paths to the bottom-right corner
}

int main() {
    int m1 = 7, n1 = 3;
    printf("Number of unique paths for m=%d, n=%d: %d\n", m1, n1, uniquePaths(m1, n1));
    
    int m2 = 3, n2 = 2;
    printf("Number of unique paths for m=%d, n=%d: %d\n", m2, n2, uniquePaths(m2, n2));
    
    return 0;
}
