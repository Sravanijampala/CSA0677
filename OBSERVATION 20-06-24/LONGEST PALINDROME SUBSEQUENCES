#include <stdio.h>
#include <string.h>

// Function to find the length of the Longest Palindromic Subsequence
int longestPalindromicSubsequence(char *s) {
    int n = strlen(s);
    int dp[n][n];

    // Every substring of length 1 is a palindrome of length 1
    for (int i = 0; i < n; i++) {
        dp[i][i] = 1;
    }

    // Build the dp array. Note that the lower diagonal values of the dp table are meaningless and should not be used.
    for (int len = 2; len <= n; len++) {
        for (int i = 0; i <= n - len; i++) {
            int j = i + len - 1;
            if (s[i] == s[j] && len == 2) {
                dp[i][j] = 2;
            } else if (s[i] == s[j]) {
                dp[i][j] = dp[i+1][j-1] + 2;
            } else {
                dp[i][j] = (dp[i][j-1] > dp[i+1][j]) ? dp[i][j-1] : dp[i+1][j];
            }
        }
    }

    return dp[0][n-1];
}

int main() {
    char s[] = "bbabcbcab";
    int len = longestPalindromicSubsequence(s);
    printf("Length of Longest Palindromic Subsequence is: %d\n", len);

    return 0;
}
