#include <stdio.h>

#define MAX_STATIONS 100

// Function to find the minimum time to complete the assembly line tasks
int assemblyLineScheduling(int a[][MAX_STATIONS], int t[][MAX_STATIONS], int e[], int x[], int n) {
    int T1[MAX_STATIONS], T2[MAX_STATIONS];
    
    // Initialize base cases
    T1[0] = e[0] + a[0][0]; // Entry time for line 1 + time to process station 0 on line 1
    T2[0] = e[1] + a[1][0]; // Entry time for line 2 + time to process station 0 on line 2
    
    // Compute T1[j] and T2[j] for each station j
    for (int j = 1; j < n; j++) {
        T1[j] = a[0][j] + fmin(T1[j-1], T2[j-1] + t[1][j-1]);
        T2[j] = a[1][j] + fmin(T2[j-1], T1[j-1] + t[0][j-1]);
    }
    
    // Return the minimum time to exit the assembly lines
    return fmin(T1[n-1] + x[0], T2[n-1] + x[1]);
}

int main() {
    int a[2][MAX_STATIONS] = {{7, 9, 3, 4, 8}, // Processing times for line 1
                              {8, 5, 6, 4, 5}}; // Processing times for line 2
    
    int t[2][MAX_STATIONS-1] = {{2, 3, 1, 3}, // Transfer times from line 1 to line 2
                                {2, 1, 2, 2}}; // Transfer times from line 2 to line 1
    
    int e[2] = {2, 4}; // Entry times for line 1 and line 2
    int x[2] = {3, 2}; // Exit times for line 1 and line 2
    
    int n = 5; // Number of stations
    
    int minTime = assemblyLineScheduling(a, t, e, x, n);
    
    printf("Minimum time to complete the assembly line tasks: %d\n", minTime);
    
    return 0;
}
