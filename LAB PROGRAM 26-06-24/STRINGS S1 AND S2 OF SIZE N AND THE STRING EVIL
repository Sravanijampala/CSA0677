#include <stdio.h>
#include <string.h>

#define MOD 1000000007
#define MAXN 105

// Dynamic programming table
int dp[MAXN][26][2]; // dp[i][j][k]: i = position, j = current character ('a' to 'z'), k = within bounds (0 or 1)

int countGoodStrings(int n, char* s1, char* s2, char* evil) {
    int len_s1 = strlen(s1);
    int len_s2 = strlen(s2);
    int len_evil = strlen(evil);
    
    memset(dp, 0, sizeof(dp));
    
    // Initialize dp[0][j][0] and dp[0][j][1] based on s1 and s2
    for (int j = 0; j < 26; ++j) {
        if (j >= s1[0] - 'a' && j <= s2[0] - 'a') {
            dp[0][j][0] = 1;
        }
        if (j == s1[0] - 'a') {
            dp[0][j][1] = 1;
        }
    }
    
    // Fill the dp table
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < 26; ++j) {
            if (dp[i][j][1]) {
                // If the current prefix is guaranteed within bounds
                for (int c = 0; c < 26; ++c) {
                    if (dp[i+1][c][1]) {
                        dp[i+1][c][1] = (dp[i+1][c][1] + dp[i][j][1]) % MOD;
                    }
                }
            }
            
            if (dp[i][j][0]) {
                // If the current prefix might be within bounds
                for (int c = 0; c < 26; ++c) {
                    // Update dp[i+1][c][1] if adding c is within bounds
                    if (c >= s1[i+1] - 'a' && c <= s2[i+1] - 'a') {
                        dp[i+1][c][1] = (dp[i+1][c][1] + dp[i][j][0]) % MOD;
                    }
                    // Update dp[i+1][c][0] if adding c and not in evil keeps it within bounds
                    if (c != evil[0] - 'a' && c >= s1[i+1] - 'a' && c <= s2[i+1] - 'a') {
                        dp[i+1][c][0] = (dp[i+1][c][0] + dp[i][j][0]) % MOD;
                    }
                }
            }
        }
    }
    
    // Calculate the result: sum dp[n][j][1] for all j
    int result = 0;
    for (int j = 0; j < 26; ++j) {
        result = (result + dp[n-1][j][1]) % MOD;
    }
    
    return result;
}

int main() {
    int n = 2;
    char s1[] = "aa";
    char s2[] = "da";
    char evil[] = "b";
    
    int result = countGoodStrings(n, s1, s2, evil);
    
    printf("Output: %d\n", result);
    
    return 0;
}
