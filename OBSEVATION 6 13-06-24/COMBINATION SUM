#include <stdio.h>
#include <stdlib.h>

// Function to find combinations that sum up to target
void findCombinations(int candidates[], int candidatesSize, int target, int start, int* current, int** result, int* returnSize, int* tempSize) {
    if (target == 0) {
        // Found a valid combination, copy it to result
        result[*returnSize] = (int*)malloc((*tempSize) * sizeof(int));
        for (int i = 0; i < *tempSize; i++) {
            result[*returnSize][i] = current[i];
        }
        (*returnSize)++;
        return;
    }

    for (int i = start; i < candidatesSize; i++) {
        if (candidates[i] > target) continue; // Skip if candidate is greater than target

        // Choose candidate[i]
        current[*tempSize] = candidates[i];
        (*tempSize)++;

        // Recursively call findCombinations with reduced target
        findCombinations(candidates, candidatesSize, target - candidates[i], i, current, result, returnSize, tempSize);

        // Backtrack
        (*tempSize)--;
    }
}

// Function to compare two integers (used for qsort)
int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

// Function to find all combinations that sum up to target
int** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {
    // Sort candidates array to handle duplicates and to maintain ascending order
    qsort(candidates, candidatesSize, sizeof(int), compare);

    // Allocate memory for storing combinations
    int** result = (int**)malloc(1000 * sizeof(int*));
    *returnSize = 0;
    int* current = (int*)malloc(target * sizeof(int)); // Temporary array to store current combination
    int tempSize = 0; // Size of current combination

    // Find combinations recursively
    findCombinations(candidates, candidatesSize, target, 0, current, result, returnSize, &tempSize);

    // Allocate memory for storing sizes of each row in result
    *returnColumnSizes = (int*)malloc(*returnSize * sizeof(int));
    for (int i = 0; i < *returnSize; i++) {
        (*returnColumnSizes)[i] = tempSize;
    }

    free(current); // Free temporary array

    return result;
}

// Function to print combinations
void printCombinations(int** combinations, int returnSize, int* returnColumnSizes) {
    printf("[\n");
    for (int i = 0; i < returnSize; i++) {
        printf("  [");
        for (int j = 0; j < returnColumnSizes[i]; j++) {
            printf("%d", combinations[i][j]);
            if (j < returnColumnSizes[i] - 1) {
                printf(", ");
            }
        }
        printf("]\n");
    }
    printf("]\n");
}

// Main function
int main() {
    int candidates[] = {2, 3, 6, 7};
    int candidatesSize = sizeof(candidates) / sizeof(candidates[0]);
    int target = 7;

    int returnSize;
    int* returnColumnSizes;
    int** combinations = combinationSum(candidates, candidatesSize, target, &returnSize, &returnColumnSizes);

    printf("Combinations that sum up to %d:\n", target);
    printCombinations(combinations, returnSize, returnColumnSizes);

    // Free dynamically allocated memory
    for (int i = 0; i < returnSize; i++) {
        free(combinations[i]);
    }
    free(combinations);
    free(returnColumnSizes);

    return 0;
}
