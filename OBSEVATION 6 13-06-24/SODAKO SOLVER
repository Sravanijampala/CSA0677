#include <stdio.h>
#include <stdbool.h>

#define N 9 // Size of the Sudoku grid

// Function prototypes
bool findEmptyLocation(int grid[N][N], int *row, int *col);
bool isValid(int grid[N][N], int row, int col, int num);
bool solveSudoku(int grid[N][N]);
void printGrid(int grid[N][N]);

// Function to find an empty location in the Sudoku grid
bool findEmptyLocation(int grid[N][N], int *row, int *col) {
    for (*row = 0; *row < N; (*row)++) {
        for (*col = 0; *col < N; (*col)++) {
            if (grid[*row][*col] == 0) {
                return true; // Found an empty location
            }
        }
    }
    return false; // No empty location found
}

// Function to check if a number can be placed in the given position (row, col)
bool isValid(int grid[N][N], int row, int col, int num) {
    // Check if the number is already in the current row or column
    for (int i = 0; i < N; i++) {
        if (grid[row][i] == num || grid[i][col] == num) {
            return false;
        }
    }
    // Check if the number is already in the current 3x3 subgrid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = startRow; i < startRow + 3; i++) {
        for (int j = startCol; j < startCol + 3; j++) {
            if (grid[i][j] == num) {
                return false;
            }
        }
    }
    return true;
}

// Function to solve the Sudoku puzzle using backtracking
bool solveSudoku(int grid[N][N]) {
    int row, col;
    
    // If there are no empty locations, Sudoku is solved
    if (!findEmptyLocation(grid, &row, &col)) {
        return true;
    }
    
    // Try numbers 1 to 9 in the current empty location
    for (int num = 1; num <= 9; num++) {
        // Check if num can be placed in the current position
        if (isValid(grid, row, col, num)) {
            grid[row][col] = num; // Place num in the current position
            
            // Recursively try to solve the rest of the Sudoku
            if (solveSudoku(grid)) {
                return true; // Solved successfully
            }
            
            // If placing num doesn't lead to a solution, backtrack
            grid[row][col] = 0; // Reset the current position
        }
    }
    
    return false; // No solution found for this path
}

// Function to print the Sudoku grid
void printGrid(int grid[N][N]) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            printf("%2d ", grid[row][col]);
        }
        printf("\n");
    }
}

// Main function to test the Sudoku solver
int main() {
    int grid[N][N] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    printf("Sudoku grid before solving:\n");
    printGrid(grid);
    
    if (solveSudoku(grid)) {
        printf("\nSudoku grid after solving:\n");
        printGrid(grid);
    } else {
        printf("\nNo solution exists for the given Sudoku grid.\n");
    }

    return 0;
}
